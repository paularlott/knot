{{ template "layout-base.tmpl" . }}

{{ define "pageTitle" }}Templates{{ end }}

{{ define "mainContent" }}
<div class="content">
  <div class="row">
    <div class="col-sm-12">
      <div class="box">
        <h2>Templates</h2>

        <div class="text-right">
          <a href="/templates/create" class="button"><i class="bx bx-plus"></i> Create Template</a>
        </div>

<div x-data="templateListComponent()" x-init="getTemplates">
  {{ template "loading" . }}
  <table class="action" x-show="!loading" x-cloak>
    <thead>
    <tr>
      <th class="id-col">Template ID</th>
      <th>Name</th>
      <th>Groups</th>
      <th>Usage</th>
      <th>Deployed</th>
      <th>&nbsp;</th>
    </tr>
    </thead>
    <tbody>
    <template x-for="t in templates" :key="t.template_id">
      <tr>
        <td class="id-col">
          <button @click="t.showIdPopup = true" class="show-id" x-text="t.template_id"></button>
          <div x-show="t.showIdPopup" @click.away="t.showIdPopup = false" @keydown.window.escape="t.showIdPopup = false" class="id-popup">
            <input type="text" x-model="t.template_id" readonly>
          </div>
        </td>
        <td x-text="t.name"></td>
        <td>
          <template x-for="group in t.group_names">
            <span class="badge info" x-text="group"></span>
          </template>
        </td>
        <td x-text="t.usage"></td>
        <td x-text="t.deployed"></td>
        <td>
            <button @click="editTemplate(t.template_id)"><i class='bx bx-edit' ></i> Edit</button>
            <button x-show="t.usage === 0 && t.template_id != '00000000-0000-0000-0000-000000000000'" @click="deleteConfirm.show = true; deleteConfirm.template = t" class="danger"><i class="bx bx-error-circle"></i> Delete</button>
        </td>
      </tr>
    </template>
    </tbody>
  </table>

  <div class="modal-tint" x-show="deleteConfirm.show" x-cloak style="display: none;">
    <div class="modal">
      <div class="modal-body">
        <h2><i class='bx bxs-error'></i> Confirm Delete</h2>
        <p>Are you sure you want to delete the template <span x-text="deleteConfirm.template.name"></span>?</p>
      </div>
      <div class="modal-footer">
        <button @click="deleteConfirm.show = false">Cancel</button>
        <button class="danger" @click="deleteTemplate(deleteConfirm.template.template_id); deleteConfirm.show = false">Delete</button>
      </div>
    </div>
  </div>

</div>

      </div>
    </div>
  </div>
</div>

<script>
function templateListComponent() {
  return {
    loading: true,
    deleteConfirm: {
      show: false,
      template: {
        template_id: '',
        name: '',
      }
    },
    templates: [],
    groups: [],
    async getTemplates() {
      this.loading = true;

      const groupsResponse = await fetch('/api/v1/groups', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      this.groups = await groupsResponse.json();

      const response = await fetch('/api/v1/templates', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      this.templates = await response.json();

      this.templates.forEach(template => {
        template.showIdPopup = false;

        // Convert group IDs to names
        template.group_names = [];
        template.groups.forEach(groupId => {
          this.groups.forEach(group => {
            if (group.group_id === groupId) {
              template.group_names.push(group.name);
            }
          });
        });
      });

      this.loading = false;
    },
    editTemplate(templateId) {
      window.location.href = `/templates/edit/${templateId}`;
    },
    async deleteTemplate(templateId) {
      var self = this;
      await fetch(`/api/v1/templates/${templateId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
          self.$dispatch('show-alert', { msg: "Template deleted", type: 'success' });
        } else {
          self.$dispatch('show-alert', { msg: "Template could not be deleted", type: 'error' });
        }
      });
      this.getTemplates();
    },
  };
}
</script>

{{ end }}
