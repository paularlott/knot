{{ template "layout-center.tmpl" . }}

{{ define "pageTitle" }}Initialize System{{ end }}

{{ define "mainContent" }}
<div x-data="createUserForm()">
  <form action="" method="POST" @submit.prevent="submitData">
    <dl>
      <dt><label for="username">Username <em>*</em></label></dt>
      <dd>
        <input type="text" name="username" x-on:keyup.debounce.500ms="checkUsername()" :class="{'error': !usernameValid}" placeholder="Username (a - Z, 0 - 9 and -)" x-model="formData.username">
        <div x-show="!usernameValid" class="error-message">Username can only contain the letters a - Z, 0 - 9 and -, max 64 characters.</div>
      </dd>
      <dt><label for="email">Email <em>*</em></label></dt>
      <dd>
        <input type="text" name="email" x-on:keyup.debounce.500ms="checkEmail()" :class="{'error': !emailValid}" placeholder="Email address" x-model="formData.email">
        <div x-show="!emailValid" class="error-message">Enter a valid email address.</div>
      </dd>
      <dt><label for="password">Password <em>*</em></label></dt>
      <dd>
        <input type="password" name="password" x-on:keyup.debounce.500ms="checkPassword()" :class="{'error': !passwordValid}" placeholder="Password" x-model="formData.password">
        <div x-show="!passwordValid" class="error-message">Password must be at least 8 characters.</div>
      </dd>
      <dt><label for="confirm_password">Confirm Password <em>*</em></label></dt>
      <dd>
        <input type="password" name="confirm_password" x-on:keyup.debounce.500ms="checkConfirmPassword()" :class="{'error': !confirmPasswordValid}" placeholder="Confirm password" x-model="formData.password_confirm">
        <div x-show="!confirmPasswordValid" class="error-message">Both passwords must match.</div>
      </dd>
      <dt></dt>
      <dd><input type="submit" :value="buttonLabel" x-text="buttonLabel" :disabled="loading" class="full-width"></dd>
    </dl>
  </form>
</div>

<script>

function createUserForm() {
  return {
    formData: {
      username: "",
      email: "",
      password: "",
      password_confirm: "",
    },
    loading: false,
    buttonLabel: 'Create User',
    usernameValid: true,
    emailValid: true,
    passwordValid: true,
    confirmPasswordValid: true,
    checkUsername() {
      return this.usernameValid = validate.name(this.formData.username);
    },
    checkEmail() {
      return this.emailValid = validate.email(this.formData.email);
    },
    checkPassword() {
      return this.passwordValid = validate.password(this.formData.password);
    },
    checkConfirmPassword() {
      return this.confirmPasswordValid = this.formData.password == this.formData.password_confirm;
    },
    submitData() {
      var err = false;
      err = !this.checkUsername() || err;
      err = !this.checkEmail() || err;
      err = !this.checkPassword() || err;
      err = !this.checkConfirmPassword() || err;
      if(err) {
        return;
      }

      this.buttonLabel = 'Initializing system...'
      this.loading = true;

      var data = {
        username: this.formData.username,
        email: this.formData.email,
        password: this.formData.password,
        roles: ['00000000-0000-0000-0000-000000000000'],
        active: true,
        ssh_public_key: "",
        preferred_shell: "bash",
      }

      fetch('/api/v1/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        })
        .then((response) => {
          if (response.status === 201) {
            window.location.href = '/';
          } else {
            response.json().then(function(data) {
              window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: data.error, type: 'error' } }));
            });
          }
        })
        .catch((error) => {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: 'Ooops Error!<br />' + error.message, type: 'error' } }));
        })
        .finally(() => {
          this.buttonLabel = 'Create User';
          this.loading = false;
        })
    },
  }
}

</script>

{{ end }}
