{{ template "metaHead" (map "PageTitle" "Sessions") }}
{{ template "beforeContent" . }}

<div class="row">
  <div class="col-sm-12">
    <div class="box">
      <h2>Active Sessions</h2>

<div x-data="sessionsComponent()" x-init="getSessions">
  <div class="responsiveTableWrapper">
    <div class="responsiveTableWrapperInner">
      {{ template "loading" . }}
      <table class="action" x-show="!loading" x-cloak>
        <thead>
        <tr>
          <th>Session ID</th>
          <th>IP</th>
          <th>User Agent</th>
          <th>Current</th>
          <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        <template x-for="session in sessions" :key="session.session_id">
          <tr>
            <td x-text="session.session_id" class="no-wrap"></td>
            <td x-text="session.ip"></td>
            <td x-text="session.user_agent"></td>
            <td x-text="session.current ? 'Yes' : 'No'"></td>
            <td><button @click="deleteSession(session.session_id)" class="danger">Delete</button></td>
          </tr>
        </template>
        </tbody>
      </table>
    </div>
  </div>
</div>

    </div>
  </div>
</div>

<script>
function sessionsComponent() {
  return {
    loading: true,
    sessions: [],
    async getSessions() {
      this.loading = true;
      const response = await fetch('/api/v1/sessions', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      this.sessions = await response.json();
      this.loading = false;
    },
    async deleteSession(sessionId) {
      await fetch(`/api/v1/sessions/${sessionId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Session deleted", type: 'success' } }));
        } else {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Session could not be deleted", type: 'error' } }));
        }
      });
      this.getSessions();
    },
  };
}
</script>

{{ template "afterContent" . }}
