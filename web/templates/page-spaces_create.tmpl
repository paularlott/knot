<!DOCTYPE html>
<html>
  <head>
    {{ template "head-meta" (map "PageTitle" "Create Space") }}
  </head>
  <body
    x-data="{ 'darkMode': true }"
    x-init="darkMode = JSON.parse(localStorage.getItem('darkMode'));
            if(darkMode == null) darkMode = true;
            $watch('darkMode', val => localStorage.setItem('darkMode', val))"
    :class="darkMode ? 'dark' : 'light'"
  >

    <div class="layout">
      <aside>
        <header>
          <h1><img src="images/knot-logo.webp" alt="knot Logo" /> knot</h1>
        </header>
        <div class="menu">
          {{ template "main-menu" . }}
        </div>
      </aside>
      <div class="content-container">
        <header>
          <form>
            <input type="checkbox" :value="darkMode" @change="darkMode = !darkMode" name="theme" class="light-dark">
          </form>

          <div>{{ .username }}</div>
        </header>
        <div class="content">

          <div class="row">
            <div class="col-sm-6 col-sm-offset-3">
              <div class="box">
                <h2>Create Space</h2>

                <div x-data="createSpaceForm()">
                  <form action="" method="POST" @submit.prevent="submitData">
                    <dl>
                      <dt><label for="name">Space Name <em>*</em></label></dt>
                      <dd>
                        <input type="text" name="name" x-on:keyup.debounce.500ms="checkName()" :class="{'error': !nameValid}" placeholder="Space name" x-model="formData.name">
                        <div x-show="!nameValid" class="error-message">Space name can only contain the letters a - Z, 0 - 9 and -, max 64 characters.</div>
                      </dd>
                      <dt><label for="name">Template <em>*</em></label></dt>
                      <dd>
                        <div class="selectControl">
                          <select id="template" name="template" x-model="formData.template_id">
                            <option value="" selected="selected">None (Manual Agent Deploy)</option>
                            <option value="59c0993f-da84-4335-a524-cfbc84f8d84e">Ubuntu 22.04</option>
                            <option value="59c0993f-da84-4335-a524-cfbc84f8d85e">Redis</option>
                            <option value="59c0993f-da84-4335-a524-cfbc84f8d86e">KeyDB</option>
                          </select>
                        </div>
                      </dd>
                      <dt x-show="formData.template_id === ''"><label for="name">Agent URL <em>*</em></label></dt>
                      <dd x-show="formData.template_id === ''">
                        <input type="url" name="address" x-on:keyup.debounce.500ms="checkAddress()" :class="{'error': !addressValid}" placeholder="URL of agent" x-model="formData.agent_url">
                        <div x-show="!addressValid" class="error-message">When template is None this must be a valid URL.</div>
                      </dd>
                      <dt></dt>
                      <dd class="text-right"><input type="submit" :value="buttonLabel" x-text="buttonLabel" :disabled="loading"></dd>
                    </dl>
                  </form>
                </div>

              </div>
            </div>
          </div>

        </div>
      </div>
    </div>


<script>

function createSpaceForm() {
  return {
    formData: {
      name: "",
      template_id: "",
      agent_url: "",
    },
    loading: false,
    buttonLabel: 'Create Space',
    nameValid: true,
    addressValid: true,
    checkName() {
      return this.nameValid = validate.name(this.formData.name);
    },
    checkAddress() {
      if(this.formData.template_id == "") {
        return this.addressValid = validate.uri(this.formData.agent_url);
      }
      return true;
    },
    submitData() {
      var err = false;
      err = !this.checkName() || err;
      err = !this.checkAddress() || err;
      if(err) {
        return;
      }

      this.buttonLabel = 'Creating space...'
      this.loading = true;

      fetch('/api/v1/spaces', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.formData)
        })
        .then((response) => {
          if (response.status === 201) {
            window.location.href = '/spaces';
          } else {
            window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Failed to create space", type: 'error' } }));
          }
        })
        .catch((error) => {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: 'Ooops Error!<br />' + error.message, type: 'error' } }));
        })
        .finally(() => {
          this.buttonLabel = 'Create Space';
          this.loading = false;
        })
    },
  }
}

</script>

{{ template "alerts" . }}

  </body>
</html>
