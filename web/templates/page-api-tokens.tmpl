{{ template "metaHead" (map "PageTitle" "API Tokens") }}
{{ template "beforeContent" . }}

<div class="content">
  <div class="row">
    <div class="col-sm-12">
      <div class="box">
        <h2>API Tokens</h2>

        <div class="text-right">
          <a href="/api-tokens/create" class="button"><i class="bx bx-plus"></i> Create Token</a>
        </div>

<div x-data="tokenComponent()" x-init="getTokens">
  {{ template "loading" . }}
  <table class="action" x-show="!loading" x-cloak>
    <thead>
    <tr>
      <th>Token ID</th>
      <th>Name</th>
      <th>&nbsp;</th>
    </tr>
    </thead>
    <tbody>
    <template x-for="t in tokens" :key="t.token_id">
      <tr>
        <td x-text="t.token_id" class="no-wrap"></td>
        <td x-text="t.name"></td>
        <td><button @click="deleteConfirm.show = true; deleteConfirm.token = t" class="danger"><i class="bx bx-error-circle"></i> Delete</button></td>
      </tr>
    </template>
    </tbody>
  </table>

  <div class="modal-tint" x-show="deleteConfirm.show" x-cloak style="display: none;">
    <div class="modal">
      <div class="modal-body">
        <h2><i class='bx bxs-error'></i> Confirm Delete</h2>
        <p>Are you sure you want to delete the API token <span x-text="deleteConfirm.token.name"></span>?</p>
        <p>Deleting the token may prevent access.</p>
      </div>
      <div class="modal-footer">
        <button @click="deleteConfirm.show = false">Cancel</button>
        <button class="danger" @click="deleteToken(deleteConfirm.token.token_id); deleteConfirm.show = false">Delete</button>
      </div>
    </div>
  </div>

</div>

      </div>
    </div>
  </div>
</div>

<script>
function tokenComponent() {
  return {
    loading: true,
    tokens: [],
    deleteConfirm: {
      show: false,
      token: {
        token_id: '',
        name: ''
      }
    },
    async getTokens() {
      this.loading = true;
      const response = await fetch('/api/v1/tokens', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      this.tokens = await response.json();
      this.loading = false;
    },
    async deleteToken(tokenId) {
      await fetch(`/api/v1/tokens/${tokenId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Token deleted", type: 'success' } }));
        } else {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Token could not be deleted", type: 'error' } }));
        }
      });
      this.getTokens();
    },
  };
}
</script>

{{ template "afterContent" . }}
