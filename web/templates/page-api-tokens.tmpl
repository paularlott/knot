<!DOCTYPE html>
<html>
  <head>
    {{ template "head-meta" (map "PageTitle" "API Tokens") }}
  </head>
  <body
    x-data="{ 'darkMode': true }"
    x-init="darkMode = JSON.parse(localStorage.getItem('darkMode'));
            if(darkMode == null) darkMode = true;
            $watch('darkMode', val => localStorage.setItem('darkMode', val))"
    :class="darkMode ? 'dark' : 'light'"
  >

    <div class="layout">
      <aside>
        <header>
          <h1><img src="images/knot-logo.webp" alt="knot Logo" /> knot</h1>
        </header>
        <div class="menu">
          {{ template "main-menu" . }}
        </div>
      </aside>
      <div class="content-container">
        <header>
          <form>
            <input type="checkbox" :value="darkMode" @change="darkMode = !darkMode" name="theme" class="light-dark">
          </form>

          <div>{{ .username }}</div>
        </header>
        <div class="content">

          <div class="row">
            <div class="col-sm-12">
              <div class="box">
                <h2>API Tokens</h2>

                <div class="text-right">
                  <a href="/api-tokens/create" class="button"><i class="bx bx-plus"></i> Create Token</a>
                </div>

<div x-data="tokenComponent()" x-init="getTokens">
  <div class="responsiveTableWrapper">
    <div class="responsiveTableWrapperInner">
      {{ template "loading" . }}
      <table class="action" x-show="!loading" x-cloak>
        <thead>
        <tr>
          <th>Token ID</th>
          <th>Name</th>
          <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        <template x-for="t in tokens" :key="t.token_id">
          <tr>
            <td x-text="t.token_id" class="no-wrap"></td>
            <td x-text="t.name"></td>
            <td><button @click="deleteToken(t.token_id)" class="danger">Delete</button></td>
          </tr>
        </template>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
function tokenComponent() {
  return {
    loading: true,
    tokens: [],
    token: sessionStorage.getItem('token'),
    async getTokens() {
      this.loading = true;
      const response = await fetch('/api/v1/tokens', {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.token}`
        }
      });
      this.tokens = await response.json();
      this.loading = false;
    },
    async deleteToken(tokenId) {
      await fetch(`/api/v1/tokens/${tokenId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.token}`
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Token deleted", type: 'success' } }));
        } else {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Token could not be deleted", type: 'error' } }));
        }
      });
      this.getTokens();
    },
  };
}
</script>

              </div>
            </div>
          </div>

        </div>
      </div>
    </div>

{{ template "alerts" . }}

  </body>
</html>
