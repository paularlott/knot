{{ template "metaHead" (map "PageTitle" "Spaces") }}
{{ template "beforeContent" . }}

<div class="content">
  <div class="row">
    <div class="col-sm-12">
      <div class="box">
        <h2>Spaces</h2>

        <div class="text-right">
          <a href="/spaces/create" class="button"><i class="bx bx-plus"></i> Create Space</a>
        </div>

<div x-data="spacesListComponent()" x-init="getSpaces">
  <div class="responsiveTableWrapper">
    <div class="responsiveTableWrapperInner">
      {{ template "loading" . }}
      <table class="action" x-show="!loading" x-cloak>
        <thead>
        <tr>
          <th>Space ID</th>
          <th>Name</th>
          <th>Template</th>
          <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        <template x-for="s in spaces" :key="s.space_id">
          <tr>
            <td x-text="s.space_id" class="no-wrap"></td>
            <td x-text="s.name"></td>
            <td x-text="s.template_name"></td>
            <td>
              <a :href="`/proxy/spaces/${s.name}/code-server/`" :target="`spaces_${s.space_id}_codeserver`" x-show="s.has_code_server"><img src="icons/vscode.svg" alt="VSCode" style="max-height: 40px;" /></a>
              <img src="icons/terminal.svg" alt="Terminal" style="max-height: 40px;" x-show="s.has_terminal" @click="openTerminal(s.name, s.space_id)" style="cursor: pointer;" />
              <button x-show="!s.is_deployed" @click="startSpace(s.space_id)">Start</button> <button x-show="s.is_deployed" @click="stopSpace(s.space_id)">Stop</button>
              <button x-show="!s.is_deployed" @click="editSpace(s.space_id)">Edit</button> <button x-show="!s.is_deployed" @click="deleteSpace(s.space_id)" class="danger">Delete</button>
            </td>
          </tr>
        </template>
        </tbody>
      </table>
    </div>
  </div>
</div>

      </div>
    </div>
  </div>
</div>

<script>
function spacesListComponent() {
  return {
    loading: true,
    spaces: [],
    async getSpaces() {
      this.loading = true;
      const response = await fetch('/api/v1/spaces', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      this.spaces = await response.json();
      this.loading = false;
      this.spaces.forEach(space => this.getServiceState(space));
    },
    async getServiceState(space) {
      setInterval(async () => {
        await fetch(`/api/v1/spaces/${space.space_id}/service-state`, {
          headers: {
            'Content-Type': 'application/json'
          }
        }).then((response) => {
          if (response.status === 200) {
            response.json().then((serviceState) => {
              space.has_code_server = serviceState.has_code_server;
              space.has_ssh = serviceState.has_ssh;
              space.is_deployed = serviceState.is_deployed;
            });
          } else {
            space.has_code_server = space.has_ssh = false;
          }
        });
      }, 5000);
    },
    async startSpace(spaceId) {
    },
    async stopSpace(spaceId) {
    },
    async deleteSpace(spaceId) {
      await fetch(`/api/v1/spaces/${spaceId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space deleted", type: 'success' } }));
        } else {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be deleted", type: 'error' } }));
        }
      });
      this.getSpaces();
    },
  };
}
</script>

{{ template "afterContent" . }}
