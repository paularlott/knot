{{ template "metaHead" (map "PageTitle" "Spaces") }}
{{ template "beforeContent" . }}

<div class="content">
  <div class="row">
    <div class="col-sm-12">
      <div class="box">
        <h2>Spaces</h2>

        <div class="text-right">
          <a href="/spaces/create" class="button"><i class="bx bx-plus"></i> Create Space</a>
        </div>

<div x-data="spacesListComponent()" x-init="getSpaces">
  {{ template "loading" . }}
  <table class="action" x-show="!loading" x-cloak>
    <thead>
    <tr>
      <th class="id-col">Space ID</th>
      <th>Name</th>
      <th>Template</th>
      <th>Status</th>
      <th>&nbsp;</th>
    </tr>
    </thead>
    <tbody>
    <template x-for="s in spaces" :key="s.space_id">
      <tr>
        <td class="id-col">
          <button @click="s.showIdPopup = true" class="show-id" x-text="s.space_id"></button>
          <div x-show="s.showIdPopup" @click.away="s.showIdPopup = false" @keydown.window.escape="s.showIdPopup = false" class="id-popup">
            <input type="text" x-model="s.space_id" readonly>
          </div>
        </td>
        <td x-text="s.name"></td>
        <td x-text="s.template_name"></td>
        <td>
          <span x-show="s.is_deployed && !s.is_stopping" class="badge success">Running</span>
          <span x-show="s.is_starting" class="badge warning">Starting</span>
          <span x-show="s.is_stopping" class="badge warning">Stopping</span>
          <span x-show="!s.is_deployed && !s.is_stopping" class="badge danger">Stopped</span>
          <span x-show="s.update_available" class="badge update">Update Available</span>
        </td>
        <td>
          <span x-show="s.is_deployed && !s.is_stopping">
            <button class="outline" x-show="s.has_ssh" @click="s.showSSHPopup = true"><i class='bx bxs-terminal' ></i> SSH</button>
            <div x-show="s.showSSHPopup" @click.away="s.showSSHPopup = false" @keydown.window.escape="s.showSSHPopup = false" class="space-ssh-popup">
              <input type="text" x-model="s.sshCmd" readonly>
            </div>

            <button class="outline" x-show="s.has_code_server" @click="openCodeServer(s.space_id)"><i class='bx bx-code-alt' ></i> Code Server</button>
            <button class="outline" x-show="s.has_terminal" @click="openTerminal(s.space_id)"><i class='bx bx-terminal'></i> Terminal</button>
          </span>

          <button class="outline" @click="s.showMenu = true"><i class='bx bx-dots-vertical'></i></button>
          <div x-show="s.showMenu" @click.away="s.showMenu = false" @keydown.window.escape="s.showMenu = false" class="space-menu-popup">
            <button x-show="!s.is_deployed" x-bind:disabled="s.starting || s.stopping || s.deleting" @click="startSpace(s.space_id); s.starting = true"><i class='bx bx-play-circle' ></i> Start<span x-show="s.starting">ing ...</span></button>
            <button x-show="s.is_deployed" x-bind:disabled="s.starting || s.stopping || s.deleting" @click="stopSpace(s.space_id); s.stopping = true"><i class='bx bx-stop-circle' ></i> Stop<span x-show="s.stopping">ping ...</span></button>
            <button x-show="!s.is_deployed" x-bind:disabled="s.starting || s.stopping || s.deleting" @click="editSpace(s.space_id)"><i class='bx bx-edit' ></i> Edit</button>
            <button x-show="!s.is_deployed" x-bind:disabled="s.starting || s.stopping || s.deleting" @click="deleteConfirm.show = true; deleteConfirm.space = s; s.deleting = true" class="danger"><i class="bx bx-error-circle"></i> <span x-show="!s.deleting">Delete</span><span x-show="s.deleting">Deleting</span></button>
          </div>
        </td>
      </tr>
    </template>
    </tbody>
  </table>


  <div class="modal-tint" x-show="deleteConfirm.show" x-cloak style="display: none;">
    <div class="modal">
      <div class="modal-body">
        <h2><i class='bx bxs-error'></i> Confirm Delete</h2>
        <p>Are you sure you want to delete the space <span x-text="deleteConfirm.space.name"></span>?</p>
        <p>Deleting the space will also delete any template volumes and the data they contain.</p>
      </div>
      <div class="modal-footer">
        <button @click="deleteConfirm.show = false; deleteConfirm.space.deleting = false">Cancel</button>
        <button class="danger" @click="deleteSpace(deleteConfirm.space.space_id); deleteConfirm.show = false">Delete</button>
      </div>
    </div>
  </div>

</div>

      </div>
    </div>
  </div>
</div>

<script>
function spacesListComponent() {
  return {
    loading: true,
    spaces: [],
    timerIDs: [],
    deleteConfirm: {
      show: false,
      space: {
        space_id: '',
        name: ''
      }
    },
    async getSpaces() {
      this.loading = true;

      // Clear all timers
      Object.keys(this.timerIDs).forEach((key) => {
        clearInterval(this.timerIDs[key]);
      });
      this.timerIDs = [];

      const response = await fetch('/api/v1/spaces', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      this.spaces = await response.json();
      this.loading = false;
      this.spaces.forEach(space => {
        space.starting = false;
        space.stopping = false;
        space.deleting = false;
        space.showMenu = false;
        space.showIdPopup = false;
        space.showSSHPopup = false;
        space.sshCmd = "ssh -o ProxyCommand='knot forward ssh %h' {{ .username }}@" + space.name;
        this.timerIDs[space.space_id] = setInterval(async () => {
          await this.fetchServiceState(space);
        }, 5000);
      });
    },
    async fetchServiceState(space, resetStateFlags = false) {
      await fetch(`/api/v1/spaces/${space.space_id}/service-state`, {
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
          response.json().then((serviceState) => {
            space.has_code_server = serviceState.has_code_server;
            space.has_ssh = serviceState.has_ssh;
            space.has_terminal = serviceState.has_terminal;
            space.is_deployed = serviceState.is_deployed;
            space.update_available = serviceState.update_available;

            if (resetStateFlags) {
              space.starting = false;
              space.stopping = false;
              space.deleting = false;
            }
          });
        } else {
          space.has_code_server = space.has_ssh = space.has_terminal = false;

          // If 404 then remove the space from the array
          if (response.status === 404) {
            this.spaces = this.spaces.filter(s => s.space_id !== space.space_id);
          }
        }
      });
    },
    async startSpace(spaceId) {
      await fetch(`/api/v1/spaces/${spaceId}/start`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space started", type: 'success' } }));
        } else {
          response.json().then((data) => {
            window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be started: " + data.error, type: 'error' } }));
          });
        }
      }).catch((error) => {
        window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be started: " + error, type: 'error' } }));
      }).finally(() => {
        const space = this.spaces.find(space => space.space_id === spaceId);
        space.showMenu = false;
        this.fetchServiceState(space, true);
      });
    },
    async stopSpace(spaceId) {
      await fetch(`/api/v1/spaces/${spaceId}/stop`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space stopped", type: 'success' } }));
        } else {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be stopped", type: 'error' } }));
        }
      }).catch((error) => {
        window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be stopped: " + error, type: 'error' } }));
      }).finally(() => {
        const space = this.spaces.find(space => space.space_id === spaceId);
        space.showMenu = false;
        this.fetchServiceState(space, true);
      });
    },
    async deleteSpace(spaceId) {
      await fetch(`/api/v1/spaces/${spaceId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then((response) => {
        if (response.status === 200) {
           window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space deleted", type: 'success' } }));
        } else {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be deleted", type: 'error' } }));
        }
      }).catch((error) => {
        window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Space could not be deleted: " + error, type: 'error' } }));
      }).finally(() => {
        const space = this.spaces.find(space => space.space_id === spaceId);
        space.showMenu = false;
        this.getSpaces();
      });
    },
    editSpace(spaceId) {
      window.location.href = `/spaces/edit/${spaceId}`;
    },
  };
}
</script>

{{ template "afterContent" . }}
