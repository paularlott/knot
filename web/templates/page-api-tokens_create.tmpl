{{ template "layout-base.tmpl" . }}

{{ define "pageTitle" }}Create API Token{{ end }}

{{ define "mainContent" }}
<div class="content">
  <div class="row">
    <div class="col-sm-6 col-sm-offset-3">
      <div class="box">
        <h2>Create API Token</h2>

        <div x-data="createTokenForm()">
          <form action="" method="POST" @submit.prevent="submitData">
            <dl>
              <dt><label for="name">Token Name <em>*</em></label></dt>
              <dd>
                <input type="text" name="name" x-on:keyup.debounce.500ms="checkName()" :class="{'error': !nameValid}" placeholder="Token name" x-model="formData.name">
                <div x-show="!nameValid" class="error-message">The token name is required and must be shorter than 255 characters.</div>
              </dd>
              <dt></dt>
              <dd class="text-right"><input type="submit" :value="buttonLabel" x-text="buttonLabel" :disabled="loading"></dd>
            </dl>
          </form>
        </div>

      </div>
    </div>
  </div>
</div>

<script>

function createTokenForm() {
  return {
    formData: {
      name: "",
    },
    loading: false,
    buttonLabel: 'Create Token',
    nameValid: true,
    checkName() {
      return this.nameValid = this.formData.name.length > 0 && this.formData.name.length < 255;
    },
    submitData() {
      var err = false,
          self = this;
      err = !this.checkName() || err;
      if(err) {
        return;
      }

      this.buttonLabel = 'Creating token...'
      this.loading = true;

      var data = {
        name: this.formData.name,
      }

      fetch('/api/v1/tokens', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        })
        .then((response) => {
          if (response.status === 201) {
            window.location.href = '/api-tokens';
          } else {
            self.$dispatch('show-alert', { msg: "Failed to create API token", type: 'error' });
          }
        })
        .catch((error) => {
          self.$dispatch('show-alert', { msg: 'Ooops Error!<br />' + error.message, type: 'error' });
        })
        .finally(() => {
          this.buttonLabel = 'Create Token';
          this.loading = false;
        })
    },
  }
}

</script>

{{ end }}
