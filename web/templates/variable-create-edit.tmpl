{{ if .isEdit }}
{{ template "metaHead" (map "PageTitle" "Edit Variable") }}
{{ else }}
{{ template "metaHead" (map "PageTitle" "Create Variable") }}
{{ end }}
{{ template "beforeContent" . }}

<div class="content full-height">
  <div class="row">
    <div class="col-sm-12">
      <div class="box full-height" x-data="variableForm()" x-init="initData()">
        <h2>{{ if .isEdit }}Edit Variable{{ else }}Create Variable{{ end }}</h2>

        {{ template "loading" . }}
        <form action="" method="POST" @submit.prevent="submitData" x-show="!loading" x-cloak>
          <dl>
            <dt><label for="name">Name <em>*</em></label></dt>
            <dd>
              <input type="text" name="name" x-on:keyup.debounce.500ms="checkName()" :class="{'error': !nameValid}" placeholder="Template name" x-model="formData.name">
              <div x-show="!nameValid" class="error-message">Space name can only contain the letters a - Z, 0 - 9 and -, max 64 characters.</div>
            </dd>
            <dt><label for="job">Value</label></dt>
            <dd class="grow">
              <div :class="{'error': !valueValid, 'editor-wrap': true}">
                <textarea name="value" id="value"></textarea>
                <div x-show="!valueValid" class="error-message">Value must be less than 10MB.</div>
              </div>
            </dd>
            <dt></dt>
            <dd class="text-right"><input type="submit" :value="buttonLabel" x-text="buttonLabel" :disabled="loading"></dd>
          </dl>
        </form>

      </div>
    </div>
  </div>
</div>

<script>

function variableForm() {
  var isEdit = "{{ .isEdit }}" == 'true';

  return {
    formData: {
      name: "",
      value: "",
    },
    loading: true,
    buttonLabel: isEdit ? 'Update Variable' : 'Create Variable',
    nameValid: true,
    valueValid: true,

    async initData() {
      if(isEdit) {
        const response = await fetch('/api/v1/templatevars/{{ .templateVarId }}', {
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.status !== 200) {
          window.location.href = '/spaces';
        } else {
          const v = await response.json();

          this.formData.name = v.name;
          this.formData.value = v.value;
        }
      }

      let darkMode = JSON.parse(localStorage.getItem('darkMode'));
      if(darkMode == null)
        darkMode = true;

      // Create the job editor
      let editor = ace.edit('value');
      editor.session.setValue(this.formData.value);
      editor.session.on('change', () => {
          this.formData.value = editor.getValue();
      });
      editor.setTheme(darkMode ? "ace/theme/github_dark" : "ace/theme/github");
      editor.session.setMode("ace/mode/text");
      editor.setOptions({
        printMargin: false,
        newLineMode: 'unix',
        tabSize: 2,
        wrap: false,
        vScrollBarAlwaysVisible: true,
        customScrollbar: true,
      });

      // Listen for the theme_change event on the body & change the editor theme
      window.addEventListener('theme-change', function (e) {
        if (e.detail.dark_theme) {
          editor.setTheme("ace/theme/github_dark");
        } else {
          editor.setTheme("ace/theme/github");
        }
      });

      this.loading = false;
    },
    checkName() {
      return this.nameValid = validate.name(this.formData.name);
    },
    checkValue() {
      return this.valueValid = validate.maxLength(this.formData.value, 10 * 1024 * 1024);
    },

    async submitData() {
      var err = false;
      err = !this.checkName() || err;
      err = !this.checkValue() || err;
      if(err) {
        return;
      }

      this.buttonLabel = isEdit ? 'Updating variable...' : 'Create variable...'
      this.loading = true;

      fetch(isEdit ? '/api/v1/templatevars/{{ .templateVarId }}' : '/api/v1/templatevars', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.formData)
        })
        .then((response) => {
          if (response.status === 200) {
            window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Variable updated", type: 'success' } }));
          } else if (response.status === 201) {
            window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Variable created", type: 'success' } }));
            response.json().then(function(data) {
              window.location.href = '/variables/edit/' + data.templatevar_id;
            });
          } else {
            response.json().then((data) => {
              window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: "Failed to update the variable, " + data.error, type: 'error' } }));
            });
          }
        })
        .catch((error) => {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: 'Ooops Error!<br />' + error.message, type: 'error' } }));
        })
        .finally(() => {
          this.buttonLabel = isEdit ? 'Update Variable' : 'Create Variable';
          this.loading = false;
        })
    },
  }
}

</script>

{{ template "afterContent" }}
