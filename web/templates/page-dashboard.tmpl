<!DOCTYPE html>
<html>
  <head>
    {{ template "head-meta" (map "PageTitle" "Dashboard") }}
  </head>
  <body
    x-data="{ 'darkMode': true }"
    x-init="darkMode = JSON.parse(localStorage.getItem('darkMode'));
            if(darkMode == null) darkMode = true;
            $watch('darkMode', val => localStorage.setItem('darkMode', val))"
    :class="darkMode ? 'dark' : 'light'"
  >

    <div class="layout">
      <aside>
        <header>
          <h1><img src="images/knot-logo.webp" alt="knot Logo" /> knot</h1>
        </header>
        <div class="menu">
          <nav>
            <ul>
              <li><a href="/dashboard"><i class="bx bxs-dashboard"></i> Dashboard</a></li>
              <li><a href="/"><i class="bx bx-server"></i> Boxes</a></li>
              <li><a href="/"><i class="bx bx-list-ul"></i> Templates</a></li>
              <li><a href="/logout"><i class="bx bx-log-out-circle"></i> Logout</a></li>
              <li><a href="api-docs/"><i class="bx bx-code-alt"></i> API Docs</a></li>
              <li><a href="https://github.com/paularlott/knot/"><i class="bx bxl-github"></i> Github</a></li>
            </ul>
          </nav>
        </div>
      </aside>
      <div class="content-container">
        <header>
          <form>
            <input type="checkbox" :value="darkMode" @change="darkMode = !darkMode" name="theme" class="light-dark">
          </form>

          <div>{{ .username }}</div>
        </header>
        <div class="content">

          <div class="row">
            <div class="col-sm-6">
              <div class="box">

          <div x-data="createUserForm()">
            <form action="/register" method="POST" @submit.prevent="submitData">
              <dl>
                <dt><label for="username">Username <em>*</em></label></dt>
                <dd>
                  <input type="text" name="username" x-on:keyup.debounce.500ms="checkUsername()" :class="{'error': !usernameValid}" placeholder="Username (all lowercase)" x-model="formData.username">
                  <div x-show="!usernameValid" class="error-message">Username must be all lowercase and can only contain the letters a - z and 0 - 9.</div>
                </dd>
                <dt><label for="email">Email <em>*</em></label></dt>
                <dd>
                  <input type="text" name="email" x-on:keyup.debounce.500ms="checkEmail()" :class="{'error': !emailValid}" placeholder="Email address" x-model="formData.email">
                  <div x-show="!emailValid" class="error-message">Enter a valid email address.</div>
                </dd>
                <dt><label for="password">Password <em>*</em></label></dt>
                <dd>
                  <input type="password" name="password" x-on:keyup.debounce.500ms="checkPassword()" :class="{'error': !passwordValid}" placeholder="Password" x-model="formData.password">
                  <div x-show="!passwordValid" class="error-message">Password must be at least 8 characters.</div>
                </dd>
                <dt><label for="confirm_password">Confirm Password <em>*</em></label></dt>
                <dd>
                  <input type="password" name="confirm_password" x-on:keyup.debounce.500ms="checkConfirmPassword()" :class="{'error': !confirmPasswordValid}" placeholder="Confirm password" x-model="formData.password_confirm">
                  <div x-show="!confirmPasswordValid" class="error-message">Both passwords must match.</div>
                </dd>
                <dt></dt>
                <dd><input type="submit" :value="buttonLabel" x-text="buttonLabel" :disabled="loading"></dd>
              </dl>
            </form>
          </div>

<script>

function createUserForm() {
  return {
    formData: {
      username: "",
      email: "",
      password: "",
      password_confirm: ""
    },
    loading: false,
    buttonLabel: 'Create User',
    usernameValid: true,
    emailValid: true,
    passwordValid: true,
    confirmPasswordValid: true,
    checkUsername() {
      var re = /^[a-z0-9]+$/;
      return this.usernameValid = re.test(this.formData.username);
    },
    checkEmail() {
      var re = /\S+@\S+\.\S+/;
      return this.emailValid = re.test(this.formData.email);
    },
    checkPassword() {
      return this.passwordValid = this.formData.password.length >= 8;
    },
    checkConfirmPassword() {
      return this.confirmPasswordValid = this.formData.password == this.formData.password_confirm;
    },
    submitData() {
      var err = false;
      err = !this.checkUsername() || err;
      err = !this.checkEmail() || err;
      err = !this.checkPassword() || err;
      err = !this.checkConfirmPassword() || err;
      if(err) {
        return;
      }

      this.buttonLabel = 'Creating user...'
      this.loading = true;

      fetch('https://example.com/api/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.formData)
        })
        .then((response) => {
          this.formData.username = '';
          this.formData.email = '';
          this.formData.password = '';
          this.formData.password_confirm = '';

    console.log(this.formData.username)

          console.log(response)
          if (response.status === 201) {
            window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: 'You have been successfully registered!', type: 'success' } }));
          } else {
            window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: 'Your registration failed', type: 'error' } }));
          }
        })
        .catch((error) => {
          window.dispatchEvent(new CustomEvent('show-alert', { detail: { msg: 'Ooops Error!<br />' + error.message, type: 'error' } }));
        })
        .finally(() => {
          this.buttonLabel = 'Create User';
          this.loading = false;
        })
    },
  }
}

</script>

              </div>
              <div class="box">
                This is box 2

              </div>
            </div>
            <div class="col-sm-6">
              <div class="box">
                This is box 3
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-sm-12">
              <div class="box">
                <h2>Testing Tables</h2>

<div class="responsiveTableWrapper">
  <div class="responsiveTableWrapperInner">
    <table class="">
			<thead>
			<tr>
				<th>Column 1</th>
				<th>Column 2</th>
				<th>Column 3</th>
				<th>Column 4</th>
				<th>Column 5</th>
				<th>Column 6</th>
			</tr>
			</thead>
			<tbody>
			<tr>
				<td>1.1</td>
				<td>1.2</td>
				<td>1.3</td>
				<td>1.4</td>
				<td>1.5</td>
				<td>1.6</td>
			</tr>
			<tr>
				<td>2.1</td>
				<td>2.2</td>
				<td>2.3</td>
				<td>2.4</td>
				<td>2.5</td>
				<td>2.6</td>
			</tr>
			<tr>
				<td>3.1</td>
				<td>3.2</td>
				<td>3.3</td>
				<td>3.4</td>
				<td>3.5</td>
				<td>3.6</td>
			</tr>
			</tbody>
		</table>
  </div>
</div>

              </div>
            </div>
          </div>

        </div>

      </div>
    </div>

{{ template "alerts" . }}

  </body>
</html>
