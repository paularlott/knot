openapi: 3.0.3
servers:
  - url: https://127.0.0.1
    description: Local server.
info:
  version: 1.0.0
  title: Knot API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: ../images/logo-light.svg
  description: |
    # Introduction
    The REST API is used for the CLI, Web interface and 3rd party integrations.
tags:
  - name: Authorization
    description: |
      This API is authenticated using a bearer token. The token is passed in the Authorization header as a Bearer token.

      A token can be obtained by logging in with the login endpoint and providing a valid username and password, or by creating a token with the create token endpoint.
  - name: Tokens
    description: |
      Operations for working with API tokens.
  - name: Core
    description: |
      Core API endpoints.
  - name: Proxy
    description: |
      Endpoints for providing proxy services.
  - name: Spaces
    description: |
      Endpoints for working with spaces.
  - name: Users
    description: |
      These operations are for working with users.
paths:

  /api/auth/using-totp:
    get:
      tags:
        - Authorization
      summary: Get if Using TOTP
      description: Check if the server has TOTP enabled or not.
      operationId: getUsingTOTP
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  using_totp:
                    type: boolean
                    description: True if TOTP is enabled.
      security: []

  /api/audit-logs:
    get:
      tags:
      - Audit Logs
      summary: Get Audit Logs
      description: Retrieve the audit logs.
      operationId: getAuditLogs
      parameters:
      - name: start
        in: query
        description: The item to start at.
        required: false
        schema:
          type: integer
          format: int32
      - name: max-items
        in: query
        description: The maximum number of items to return.
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        '200':
          description: A list of audited operations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogs'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/clister-info:
    get:
      tags:
      - Cluster
      summary: Get Cluster Info
      description: Retrieve an overview of the cluster.
      operationId: getClusterInfo
      responses:
        '200':
          description: A list of cluster nodes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClusterNodeInfo'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/tunnels/{tunnel_name}:
    delete:
      tags:
        - Tunnels
      summary: Delete Tunnel
      description: Delete a specific tunnel for the authenticated user.
      operationId: deleteTunnel
      parameters:
        - name: tunnel_name
          in: path
          required: true
          description: The name of the tunnel to delete.
          schema:
            type: string
      responses:
        '200':
          description: Tunnel deleted successfully.
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/tunnels:
    get:
      tags:
        - Tunnels
      summary: Get Tunnels
      description: Retrieve all tunnels for the authenticated user.
      operationId: getTunnels
      responses:
        '200':
          description: A list of tunnels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TunnelInfo'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/tunnels/domain:
    get:
      tags:
        - Tunnels
      summary: Get Tunnel Domain
      description: Retrieve the domain name used for tunnels.
      operationId: getTunnelDomain
      responses:
        '200':
          description: The domain name used for tunnels.
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/users:
    post:
      tags:
        - Users
      summary: Create User
      description: |
        Create a new user.

        Only admin users can create users.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/userRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: True if the user was created.
                  user_id:
                    type: string
                    format: uuid
                    description: The ID of the user.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
      security: [BearerAuth: []]

    get:
      tags:
        - Users
      summary: Get Users
      description: Get the list of users within the system.
      operationId: listUsers
      parameters:
        - name: state
          in: query
          description: The sate of users to return
          required: false
          schema:
            type: string
            enum:
              - active
              - inactive
              - all
            default: all
        - name: location
          in: query
          description: If given tracks the number of spaces the user has deployed in the given location.
          required: false
          schema:
            type: string
        - name: local
          in: query
          description: If given and true then only users that have logged into a leaf node at least once will be returned.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The total number of users
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/users/{user_id}:
    get:
      tags:
        - Users
      summary: Get a User
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to get.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
      security: [BearerAuth: []]

    put:
      tags:
        - Users
      summary: Update User
      description: Update the user data.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
      responses:
        '200':
          description: User updated successfully
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
      security: [BearerAuth: []]

    delete:
      summary: Delete User
      description: Delete a user, a user can't delete themselves.
      tags:
        - Users
      operationId: deleteUser
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the user to delete.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/users/{user_id}/quota:
    get:
      tags:
        - Users
      summary: Get User Quota
      operationId: getUserQuota
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to get the quota for.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuota'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
      security: [BearerAuth: []]

  /api/users/whoami:
    get:
      tags:
        - Users
      summary: Get Logged In User
      operationId: getWhoAmI
      responses:
        '200':
          description: A user object for the currently authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
      security: [BearerAuth: []]

  /api/permissions:
    get:
      summary: Get Permissions
      description: Retrieve all permissions.
      operationId: getPermissions
      tags:
        - Permissions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionInfoList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/groups:
    get:
      summary: Get Groups
      description: Retrieve all groups.
      operationId: getGroups
      tags:
        - Groups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfoList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    post:
      summary: Create a Group
      description: Create a new group.
      operationId: createGroup
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupRequest'
      responses:
        '201':
          description: Group created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
      security: [BearerAuth: []]

  /api/groups/{group_id}:
    put:
      summary: Update a Group
      description: Update a group.
      operationId: updateGroup
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the group to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupRequest'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    delete:
      summary: Delete Group
      description: Delete a specified group.
      tags:
        - Groups
      operationId: deleteGroup
      parameters:
        - in: path
          name: group_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the group to delete.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    get:
      summary: Get a Group
      description: Get a group.
      operationId: getGroup
      tags:
        - Groups
      parameters:
        - in: path
          name: group_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the group to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
      security: [BearerAuth: []]

  /api/roles:
    get:
      tags:
        - Roles
      summary: Get a List of Roles
      description: Get the list of roles defined within the system.
      operationId: listRoles
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_role:
                      type: string
                      format: uuid
                    role_name:
                      type: string
        '401':
          $ref: '#/components/responses/unauthorized'
      security: [BearerAuth: []]

    post:
      summary: Create a role
      description: Create a new role.
      operationId: createRole
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
      responses:
        '201':
          description: Group created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
      security: [BearerAuth: []]

  /api/roles/{role_id}:
    put:
      summary: Update a Role
      description: Update a role.
      operationId: updateRole
      tags:
        - Roles
      parameters:
        - name: role_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the role to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    delete:
      summary: Delete Role
      description: Delete a specified role.
      tags:
        - Roles
      operationId: deleteRole
      parameters:
        - in: path
          name: role_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the role to delete.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    get:
      summary: Get a Role
      description: Get a role.
      operationId: getRole
      tags:
        - Roles
      parameters:
        - in: path
          name: role_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the role to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetails'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
      security: [BearerAuth: []]

  /api/sessions:
    get:
      tags:
        - Users
      summary: Get Sessions
      description: Retrieve all sessions for the authenticated user.
      operationId: GetSessions
      responses:
        '200':
          description: A list of sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/sessions/{session_id}:
    delete:
      tags:
        - Users
      summary: Delete a Session
      description: Delete a specific session for the authenticated user.
      operationId: DeleteSession
      parameters:
        - name: session_id
          in: path
          required: true
          description: The ID of the session to delete.
          schema:
            type: string
      responses:
        '200':
          description: Session deleted successfully.
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/auth:
    post:
      tags:
        - Authorization
      summary: Login
      description: |
        Authenticate a user with the server and create a web access token.

        A session is also opened but no session cookie is set within the response.
      operationId: LoginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: []

  /api/auth/web:
    post:
      tags:
        - Authorization
      summary: Login Web User
      description: |
        Authenticate a user with the server and create a web access token.

        A session is also opened and session cookie set within the response.
      operationId: WebLoginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: []

  /api/auth/logout:
    post:
      tags:
        - Authorization
      summary: Logout
      description: |
        Terminate the users current session.
      operationId: LogoutUser
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLogoutResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/tokens:
    get:
      summary: Get Tokens
      description: Get all tokens for the authenticated user.
      tags:
        - Tokens
      operationId: GetTokens
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenInfo'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    post:
      summary: Create Token
      description: Create a new token for the authenticated user.
      tags:
        - Tokens
      operationId: CreateToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '201':
          description: Successful operation. Returns the created token ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTokenResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
      security: [BearerAuth: []]

  /api/tokens/{token_id}:
    delete:
      summary: Delete Token
      description: Delete a specific token for the authenticated user.
      tags:
        - Tokens
      operationId: DeleteToken
      parameters:
        - in: path
          name: token_id
          schema:
            type: string
          required: true
          description: The ID of the token to delete.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/spaces:
    get:
      summary: Get Spaces
      description: Retrieve all spaces for a user.
      operationId: getSpaces
      tags:
        - Spaces
      parameters:
        - name: user_id
          in: query
          description: Optional user to limit the space list to, if not given then the current authenticated user will be used.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceInfoList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    post:
      summary: Create a Space
      description: Create a space for the authenticated user.
      operationId: createSpace
      tags:
        - Spaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpaceRequest'
      responses:
        '201':
          description: Space created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: True if the space was created.
                  space_id:
                    type: string
                    format: uuid
                    description: The ID of the created space.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
        '507':
          $ref: '#/components/responses/insufficient-storage'
      security: [BearerAuth: []]

  /api/spaces/{space_id}:
    delete:
      summary: Delete a Space
      description: Delete a space for the authenticated user.
      operationId: deleteSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to delete.
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    put:
      summary: Update a Space
      description: Update a space for the authenticated user.
      operationId: updateSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpaceRequest'
      responses:
        '200':
          description: Space update successfully
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    get:
      summary: Get a Space
      description: Retrieve a specific space.
      operationId: getSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpaceDefinition'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/spaces/{space_id}/transfer:
    post:
      summary: Transfer a Space
      description: Transfer a space to another user.
      operationId: transferSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to transfer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpaceTransferRequest'

      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '406':
          $ref: '#/components/responses/not-acceptable'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
        '503':
          $ref: '#/components/responses/service-unavailable'
        '507':
          $ref: '#/components/responses/insufficient-storage'
      security: [BearerAuth: []]

  /api/spaces/{space_id}/share:
    post:
      summary: Share a Space
      description: Share a space with another user.
      operationId: shareSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to share.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpaceTransferRequest'
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '406':
          $ref: '#/components/responses/not-acceptable'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
        '503':
          $ref: '#/components/responses/service-unavailable'
        '507':
          $ref: '#/components/responses/insufficient-storage'
      security: [BearerAuth: []]

    delete:
      summary: Remove Space Share
      description: Remove a shared space from another user.
      operationId: removeSpaceShare
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to cease sharing.
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '406':
          $ref: '#/components/responses/not-acceptable'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
        '503':
          $ref: '#/components/responses/service-unavailable'
        '507':
          $ref: '#/components/responses/insufficient-storage'
      security: [BearerAuth: []]

  /api/spaces/{space_id}/start:
    post:
      summary: Start a Space
      description: Deploy a space to the Nomad cluster creating any required volumes.
      operationId: startSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to start.
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '406':
          $ref: '#/components/responses/not-acceptable'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
        '503':
          $ref: '#/components/responses/service-unavailable'
        '507':
          $ref: '#/components/responses/insufficient-storage'
      security: [BearerAuth: []]

  /api/spaces/{space_id}/stop:
    post:
      summary: Stop a Space
      description: Stop the space from running, volumes are left intact.
      operationId: stopSpace
      tags:
        - Spaces
      parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the space to stop.
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/spaces/{user_id}/stop-for-user:
    post:
      summary: Stop Users Spaces
      description: Stop all the spaces belonging to a user.
      tags:
        - Spaces
      operationId: stopUsersSpaces
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: The ID of the user to stop the spaces for.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/templates:
    get:
      summary: Get Templates
      description: Retrieve all templates.
      operationId: getTemplates
      tags:
        - Templates
      parameters:
        - name: user_id
          in: query
          description: If given, only templates available to that user will be returned.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    post:
      summary: Create a Template
      description: Create a new template.
      operationId: createTemplate
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreateRequest'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: True if the template was created.
                  template_id:
                    type: string
                    format: uuid
                    description: The ID of the created template.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/templates/{template_id}:
    put:
      summary: Update a Template
      description: Update a template.
      operationId: updateTemplate
      tags:
        - Templates
      parameters:
        - name: template_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the template to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateUpdateRequest'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    delete:
      summary: Delete Template
      description: Delete a specified template.
      tags:
        - Templates
      operationId: deleteTemplate
      parameters:
        - in: path
          name: template_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the template to delete.
      responses:
        '200':
          description: Successful operation.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    get:
      summary: Get Template
      description: Get a Template.
      operationId: getTemplate
      tags:
        - Templates
      parameters:
        - in: path
          name: template_id
          schema:
            type: string
          required: true
          description: The ID of the template to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDetails'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/templatevars:
    get:
      summary: Get Template Variables
      description: Retrieve all template variables.
      operationId: getTemplateVars
      tags:
        - TemplateVars
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateVarList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    post:
      summary: Create a Template Variable
      description: Create a new template variable.
      operationId: createTemplateVar
      tags:
        - TemplateVars
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateVar'
      responses:
        '201':
          description: Template variable created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: True if the template variable was created.
                  templatevar_id:
                    type: string
                    format: uuid
                    description: The ID of the created template variable.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
      security: [BearerAuth: []]

  /api/templatevars/{templatevar_id}:
    put:
      summary: Update a Template Variable
      description: Update a template variable.
      operationId: updateTemplateVar
      tags:
        - TemplateVars
      parameters:
        - name: templatevar_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The ID of the template variable to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateVarValue'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    delete:
      summary: Delete Template Variable
      description: Delete a specified template variable.
      tags:
        - TemplateVars
      operationId: deleteTemplateVar
      parameters:
        - in: path
          name: templatevar_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the template variable to delete.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    get:
      summary: Get Template Variable
      description: Get a Template Variable.
      operationId: getTemplateVar
      parameters:
        - in: path
          name: templatevar_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the template variable to get.
      tags:
        - TemplateVars
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateVarValue'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/volumes:
    get:
      summary: Get Volumes
      description: Retrieve all volumes.
      operationId: getVolumes
      tags:
        - Volumes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The total number of volumes
                  volumes:
                    type: array
                    items:
                      $ref: '#/components/schemas/VolumeInfo'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    post:
      summary: Create a Volume
      description: Create a new volume.
      operationId: createVolume
      tags:
        - Volumes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeCreateRequest'
      responses:
        '201':
          description: Volume created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: True if the volume was created.
                  volume_id:
                    type: string
                    format: uuid
                    description: The ID of the created volume.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/volumes/{volume_id}:
    put:
      summary: Update a Volume
      description: Update a volume.
      operationId: updateVolume
      tags:
        - Volumes
      parameters:
        - name: volume_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeUpdateRequest'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    delete:
      summary: Delete Volume
      description: Delete a specified volume.
      tags:
        - Volumes
      operationId: deleteVolume
      parameters:
        - in: path
          name: volume_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the volume to delete.
      responses:
        '200':
          description: Successful operation.
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

    get:
      summary: Get Volume
      description: Get a Volume.
      operationId: getVolume
      tags:
        - Volumes
      parameters:
        - in: path
          name: volume_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the volume to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeDefinition'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/volumes/{volume_id}/start:
    post:
      summary: Start a Volume
      description: Start a specified volume.
      tags:
        - Volumes
      operationId: startVolume
      parameters:
        - in: path
          name: volume_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the volume to start.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: True if the volume was started.
                  location:
                    type: string
                    description: The location of the volume.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /api/volumes/{volume_id}/stop:
    post:
      summary: Stop a Volume
      description: Stop a specified volume.
      tags:
        - Volumes
      operationId: stopVolume
      parameters:
        - in: path
          name: volume_id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the volume to stop.
      responses:
        '200':
          description: Successful operation.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '423':
          $ref: '#/components/responses/locked'
        '500':
          $ref: '#/components/responses/internal-server-error'
      security: [BearerAuth: []]

  /proxy/port/{host}/{port}:
    get:
      tags:
        - Proxy
      summary: Proxy a Connection
      description: Proxy a connection to a service and optional port.
      operationId: ProxyPort
      parameters:
        - name: host
          in: path
          required: true
          description: The host or service to connect to.
          schema:
            type: string
        - name: port
          in: path
          required: true
          description: The port to connect to or 0 to use a SRV record lookup against the host to find the port.
          schema:
            type: integer
      responses:
        '200':
          description: Connected.
        '401':
          $ref: '#/components/responses/unauthorized'
      security: [BearerAuth: []]

  /api/lookup/{service}:
    get:
      tags:
        - Core
      summary: Lookup
      description: Lookup a service via DNS SRV or A record.
      parameters:
        - name: service
          in: path
          description: The name of the service to lookup
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
      security: [BearerAuth: []]

  /api/ping:
    get:
      tags:
        - Core
      summary: Ping
      description: Ping the server and get a health response.
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
      security: [BearerAuth: []]

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    AuthLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
          description: The email address of the user
        password:
          type: string
          example: password
          description: The password of the user
        totp_code:
          type: string
          example: 123456
          description: The TOTP code for the user, ignored if TOTP is not enabled.
      required:
        - email
        - password

    AuthLoginResponse:
      type: object
      properties:
        status:
          type: boolean
          description: The status of the operation, true if successful login.
        token:
          type: string
          description: The token for the user session.
        totp_secret:
          type: string
          description: The TOTP secret for the user, if set then the code needs to be provided to the user as 1st login enables TOTP.

    AuthLogoutResponse:
      type: object
      properties:
        status:
          type: boolean
          description: The status of the operation, true if successful logout.

    PermissionInfo:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the permission.
        name:
          type: string
          description: The name of the permission.

    PermissionInfoList:
      type: object
      properties:
        count:
          type: integer
          example: 1
          description: The total number of permissions.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionInfo'

    GroupInfo:
      type: object
      properties:
        group_id:
          type: string
          format: uuid
          description: The ID of the group.
        name:
          type: string
          description: The name of the group.
        max_spaces:
          type: integer
          format: uint32
          description: The maximum number of spaces the group members can have.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units the group members get.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units the group members get.
        max_tunnels:
          type: integer
          format: uint32
          description: The maximum number of tunnels the group members can have.

    GroupInfoList:
      type: object
      properties:
        count:
          type: integer
          example: 1
          description: The total number of groups.
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupInfo'

    UserGroupRequest:
      type: object
      properties:
        name:
          type: string
          example: "my group"
          maxLength: 64
          description: The name of the group.
        max_spaces:
          type: integer
          format: uint32
          description: The maximum number of spaces the group members can have.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units the group members get.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units the group members get.
        max_tunnels:
          type: integer
          format: uint32
          description: The maximum number of tunnels the group members can have.

    GroupResponse:
      type: object
      properties:
        status:
          type: boolean
          description: The status of the operation, true if successful.
        group_id:
          type: string
          format: uuid
          description: The ID of the group.

    RoleDetails:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
          description: The ID of the role.
        name:
          type: string
          description: The name of the role.
        permissions:
          type: array
          items:
            type: integer
          description: The permissions of the role.

    RoleInfo:
      type: object
      properties:
        role_id:
          type: string
          format: uuid
          description: The ID of the role.
        name:
          type: string
          description: The name of the role.

    UserRoleRequest:
      type: object
      properties:
        name:
          type: string
          example: "my role"
          maxLength: 64
          description: The name of the role.
        permissions:
          type: array
          items:
            type: integer
          description: The permissions of the role.

    RoleResponse:
      type: object
      properties:
        status:
          type: boolean
          description: The status of the operation, true if successful.
        role_id:
          type: string
          format: uuid
          description: The ID of the role.

    LookupResponse:
      type: object
      properties:
        status:
          type: boolean
          description: True if the service was found.
        host:
          type: string
          example: host.service.consul
          description: The host of the service.
        port:
          type: integer
          format: int32
          example: 8080
          description: The port of the service.

    PingResponse:
      type: object
      properties:
        status:
          type: boolean
          description: True if the server is healthy.
        version:
          type: string
          example: 1.0.0
          description: The server version string.

    AuditLogsEntry:
      type: object
      properties:
        Id:
          type: integer
          format: int64
          description: The ID of the audit log entry.
        location:
          type: string
          description: The server location of the audit log entry.
        Actor:
          type: string
          description: The actor who performed the action.
        ActorType:
          type: string
          description: The type of the actor.
        Event:
          type: string
          description: The event that occurred.
        When:
          type: string
          format: date-time
          description: The time when the event occurred.
        Details:
          type: string
          description: Additional details about the event.
        Properties:
          type: object
          additionalProperties: true
          description: Additional properties related to the event.

    AuditLogs:
      type: object
      properties:
        count:
          type: integer
          description: The total number of audit logs.
        items:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogsEntry'

    ClusterNodeInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the cluster node.
        address:
          type: string
          description: The advertised address of the cluster node.
        state:
          enum: [Alive, Suspect, Leaving, Dead]
          description: The human readable state of the cluster node.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: The metadata of the cluster node as key-value pairs.

    TunnelInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the tunnel.
        address:
          type: string
          description: The address of the tunnel.

    SessionResponse:
      type: object
      properties:
        session_id:
          type: string
          description: The ID of the session.
        ip:
          type: string
          description: The IP address of the session.
        user_agent:
          type: string
          description: The user agent of the session.
        expires_at:
          type: string
          format: date-time
          description: The expiration time of the session.
        current:
          type: boolean
          description: True if the session is the current session.

    SpaceInfo:
      type: object
      properties:
        space_id:
          type: string
          format: uuid
          description: The ID of the space.
        name:
          type: string
          description: The name of the space.
        description:
          type: string
          description: The description of the space.
        note:
          type: string
          description: The note set by the space itself.
        template_name:
          type: string
          description: The name of the template the space was created from.
        template_id:
          type: string
          format: uuid
          description: The ID of the template the space was created from.
        location:
          type: string
          description: The location of the space.
        username:
          type: string
          description: The username of the user the space belongs to.
        user_id:
          type: string
          format: uuid
          description: The ID of the user the space belongs to.
        local_container:
          type: boolean
          description: If the space is of a local container, docker or podman.
        is_manual:
          type: boolean
          description: If the space is manually created.
        shared_user_id:
          type: string
          format: uuid
          description: The ID of the user the space is shared with, or an empty string if not shared.
        shared_username:
          type: string
          description: The name of the user the space is shared with, or an empty string if not shared.
        has_code_server:
          type: boolean
          description: If the space has a running code server.
        has_ssh:
          type: boolean
          description: If the space has a running SSH server.
        has_http_vnc:
          type: boolean
          description: If the space has a running HTTP VNC server.
        has_terminal:
          type: boolean
          description: If the space can support a web terminal.
        has_vscode_tunnel:
          type: boolean
          description: If the space has a running VSCode tunnel.
        vscode_tunnel_name:
          type: string
          description: The name of the VSCode tunnel.
        is_deployed:
          type: boolean
          description: If the space is deployed.
        is_pending:
          type: boolean
          description: If the space is pending a state change.
        is_deleting:
          type: boolean
          description: If the space is being deleted.
        tcp_ports:
          type: object
          additionalProperties:
            type: string
          description: A list of the available TCP ports exposed by the space.
        http_ports:
          type: object
          additionalProperties:
            type: string
          description: A list of the available HTTP ports exposed by the space.
        update_available:
          type: boolean
          description: If an update is available for the space.
        is_remote:
          type: boolean
          description: Flags if the space is on a server other than the current one.
        has_state:
          type: boolean
          description: If the space has an agent state.
        started_at:
          type: string
          format: date-time
          description: The time when the space was started, UTC.
        icon_url:
          type: string
          description: The icon URL for the space or an empty string if there's no icon.

    SpaceInfoList:
      type: object
      properties:
        count:
          type: integer
          example: 1
          description: The total number of spaces.
        spaces:
          type: array
          items:
            $ref: '#/components/schemas/SpaceInfo'

    SpaceRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 64
          example: "my space"
          description: The name of the space.
        description:
          type: string
          description: The description of the space.
        template_id:
          type: string
          format: uuid
          description: The ID of the template to create the space from.
        shell:
          type: string
          enum: [bash, zsh, fish, sh]
          description: The shell to use in the space.
        user_id:
          type: string
          format: uuid
          description: The ID of the user to create the space for.
        alt_names:
          type: array
          items:
            type: string
          description: The alternative names for the space.
        icon_url:
          type: string
          description: The icon URL for the space or an empty string if there's no icon.

    SpaceVolume:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The ID of the volume.
        Namespace:
          type: string
          description: The namespace of the volume.

    SpaceDefinition:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: The ID of the user the space belongs to.
        template_id:
          type: string
          format: uuid
          description: The ID of the template the space was created from.
        name:
          type: string
          description: The name of the space.
        description:
          type: string
          description: The description of the space.
        shell:
          type: string
          enum: [bash, zsh, fish, sh]
          description: The shell to use in the space.
        location:
          type: string
          description: The location of the space.
        is_deployed:
          type: boolean
          description: Flags if the space is deployed.
        is_pending:
          type: boolean
          description: If the space is pending a state change.
        is_deleting:
          type: boolean
          description: If the space is being deleted.
        alt_names:
          type: array
          items:
            type: string
          description: The alternative names for the space.
        update_available:
          type: boolean
          description: If an update is available for the space.
        volume_data:
          type: array
          items:
            $ref: '#/components/schemas/SpaceVolume'
        started_at:
          type: string
          format: date-time
          description: The time when the space was started, UTC.
        icon_url:
          type: string
          description: The icon URL for the space or an empty string if there's no icon.

    TemplateInfo:
      type: object
      properties:
        template_id:
          type: string
          format: uuid
          description: The ID of the template.
        name:
          type: string
          description: The name of the template.
        description:
          type: string
          description: The description of the template.
        usage:
          type: integer
          description: The number of spaces currently using the template.
        deployed:
          type: integer
          description: The number of spaces currently deployed using the template.
        groups:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          description: The IDs of the groups assigned to the template.
        local_container:
          type: boolean
          description: If the template is a local container template, docker or podman.
        is_manual:
          type: boolean
          description: If the template is a manual template.
        is_managed:
          type: boolean
          description: If the template is managed by an origin server.
        active:
          type: boolean
          description: If the template is active.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units used by spaces created from the template.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units used by spaces created from the template.
        schedule_enabled:
          type: boolean
          description: If the template has a schedule enabled.
        auto_start:
          type: boolean
          description: If the template has auto start enabled.
        schedule:
          type: array
          description: The schedule for the template.
          minItems: 7
          maxItems: 7
          items:
            $ref: '#/components/schemas/TemplateDetailsDay'
          x-condition:
            property: schedule_enabled
            value: true
        max_uptime:
          type: integer
          format: uint32
          description: The maximum uptime of the space created from the template.
        max_uptime_unit:
          type: string
          enum: [disabled, minute, hour, day]
          description: The unit of the maximum uptime.
        locations:
          type: array
          items:
            type: string
          description: The list of locations the template is valid for.
        icon_url:
          type: string
          format: uri
          description: The URL of the icon for the template, empty string if there's no icon.

    TemplateList:
      type: object
      properties:
        count:
          type: integer
          example: 1
          description: The total number of templates.
        templates:
          type: array
          items:
            $ref: '#/components/schemas/TemplateInfo'

    TemplateCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 64
          example: "my template"
          description: The name of the template.
        description:
          type: string
          description: The description of the template.
        job:
          type: string
          description: A HCL formatted job Nomad job specification
        volumes:
          type: string
          description: A YAML formatted string describing the volumes to be created
        groups:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          description: The IDs of the groups to assign to the template.
        local_container:
          type: boolean
          description: If the template is a local container template, docker or podman.
        is_manual:
          type: boolean
          description: If the template is a manual template.
        active:
          type: boolean
          description: If the template is active.
        with_terminal:
          type: boolean
          description: If the space should support a web terminal.
        with_vscode_tunnel:
          type: boolean
          description: If the space should support a VSCode tunnel.
        with_code_server:
          type: boolean
          description: If the space should support a code server.
        with_ssh:
          type: boolean
          description: If the space should support an SSH server.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units used by spaces created from the template.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units used by spaces created from the template.
        schedule_enabled:
          type: boolean
          description: If the template has a schedule enabled.
        auto_start:
          type: boolean
          description: If the template has auto start enabled.
        schedule:
          type: array
          description: The schedule for the template.
          minItems: 7
          maxItems: 7
          items:
            $ref: '#/components/schemas/TemplateDetailsDay'
        max_uptime:
          type: integer
          format: uint32
          description: The maximum uptime of the space created from the template.
        max_uptime_unit:
          type: string
          enum: [disabled, minute, hour, day]
          description: The unit of the maximum uptime.
        locations:
          type: array
          items:
            type: string
          description: The list of locations the template is valid for.
        icon_url:
          type: string
          format: uri
          description: The URL of the icon for the template, empty string if there's no icon.

    TemplateUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 64
          example: "my template"
          description: The name of the template.
        description:
          type: string
          description: The description of the template.
        job:
          type: string
          description: A HCL formatted job Nomad job specification
        volumes:
          type: string
          description: A YAML formatted string describing the volumes to be created
        groups:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          description: The IDs of the groups to assign to the template.
        active:
          type: boolean
          description: If the template is active.
        with_terminal:
          type: boolean
          description: If the space should support a web terminal.
        with_vscode_tunnel:
          type: boolean
          description: If the space should support a VSCode tunnel.
        with_code_server:
          type: boolean
          description: If the space should support a code server.
        with_ssh:
          type: boolean
          description: If the space should support an SSH server.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units used by spaces created from the template.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units used by spaces created from the template.
        schedule_enabled:
          type: boolean
          description: If the template has a schedule enabled.
        auto_start:
          type: boolean
          description: If the template has auto start enabled.
        schedule:
          type: array
          description: The schedule for the template.
          minItems: 7
          maxItems: 7
          items:
            $ref: '#/components/schemas/TemplateDetailsDay'
        max_uptime:
          type: integer
          format: uint32
          description: The maximum uptime of the space created from the template.
        max_uptime_unit:
          type: string
          enum: [disabled, minute, hour, day]
          description: The unit of the maximum uptime.
        locations:
          type: array
          items:
            type: string
          description: The list of locations the template is valid for.
        icon_url:
          type: string
          format: uri
          description: The URL of the icon for the template, empty string if there's no icon.

    TemplateDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the template.
        description:
          type: string
          description: The description of the template.
        job:
          type: string
          description: The HCL formatted job Nomad job specification
        volumes:
          type: string
          description: A YAML formatted string describing the volumes to be created
        usage:
          type: integer
          description: The number of spaces currently using the template.
        deployed:
          type: integer
          description: The number of spaces currently deployed using the template.
        hash:
          type: string
          description: The hash of the template.
        groups:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          description: The IDs of the groups assigned to the template.
        local_container:
          type: boolean
          description: If the template is a local container template, docker or podman.
        is_manual:
          type: boolean
          description: If the template is a manual template.
        is_managed:
          type: boolean
          description: If the template is managed by an origin server.
        active:
          type: boolean
          description: If the template is active.
        with_terminal:
          type: boolean
          description: If the space should support a web terminal.
        with_vscode_tunnel:
          type: boolean
          description: If the space should support a VSCode tunnel.
        with_code_server:
          type: boolean
          description: If the space should support a code server.
        with_ssh:
          type: boolean
          description: If the space should support an SSH server.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units used by spaces created from the template.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units used by spaces created from the template.
        schedule_enabled:
          type: boolean
          description: If the template has a schedule enabled.
        auto_start:
          type: boolean
          description: If the template has auto start enabled.
        schedule:
          type: array
          description: The schedule for the template.
          minItems: 7
          maxItems: 7
          items:
            $ref: '#/components/schemas/TemplateDetailsDay'
        max_uptime:
          type: integer
          format: uint32
          description: The maximum uptime of the space created from the template.
        max_uptime_unit:
          type: string
          enum: [disabled, minute, hour, day]
          description: The unit of the maximum uptime.
        locations:
          type: array
          items:
            type: string
          description: The list of locations the template is valid for.
        icon_url:
          type: string
          format: uri
          description: The URL of the icon for the template, empty string if there's no icon.

    TemplateDetailsDay:
      type: object
      properties:
        enabled:
          type: boolean
          description: If the schedule is enabled for the day.
        from:
          type: string
          description: The start time of the schedule.
          example: "8:00am"
        to:
          type: string
          description: The end time of the schedule.
          example: "5:00pm"

    TemplateVar:
      type: object
      properties:
        templatevar_id:
          type: string
          format: uuid
          description: The ID of the template variable.
        name:
          type: string
          maxLength: 64
          description: The name of the template variable.
        location:
          type: string
          maxLength: 64
          description: The location the template variable can be used in.
        protected:
          type: boolean
          description: Whether the template variable is protected with encryption.
        local:
          type: boolean
          description: Whether the template variable is local to the server it was created on.
        restricted:
          type: boolean
          description: Whether the template variable is restricted to trusted servers only.
        is_managed:
          type: boolean
          description: Whether the template variable is managed by an origin server.

    TemplateVarList:
      type: object
      properties:
        count:
          type: integer
          description: The total number of variables
        variables:
          type: array
          items:
            $ref: '#/components/schemas/TemplateVar'

    TemplateVarValue:
      type: object
      properties:
        templatevar_id:
          type: string
          format: uuid
          description: The ID of the template variable.
        name:
          type: string
          maxLength: 64
          description: The name of the template variable.
        value:
          type: string
          description: The value of the template variable, for protected variables this is always returned as blank.
        location:
          type: string
          maxLength: 64
          description: The location the template variable can be used in.
        protected:
          type: boolean
          description: Whether the template variable is protected with encryption.
        local:
          type: boolean
          description: Whether the template variable is local to the server it was created on.
        restricted:
          type: boolean
          description: Whether the template variable is restricted to trusted servers only.
        is_managed:
          type: boolean
          description: Whether the template variable is managed by an origin server.

    TokenInfo:
      type: object
      properties:
        token_id:
          type: string
          description: The ID of the token.
        name:
          type: string
          maxLength: 255
          description: The name of the token.
        expires_at:
          type: string
          format: date-time
          description: The expiration date of the token.

    CreateTokenRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the token.
          maxLength: 255

    CreateTokenResponse:
      type: object
      properties:
        status:
          type: boolean
          description: The status of the operation.
        token_id:
          type: string
          description: The ID of the created token.

    userRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 255
          example: user1@example.com
          description: The email address of the user
        username:
          type: string
          maxLength: 64
          example: user1
          description: The username of the user
        password:
          type: string
          maxLength: 255
          example: password
          description: The password of the user
        service_password:
          type: string
          maxLength: 255
          example: password
          description: Option service password of the user, if empty a default one will be generated
        preferred_shell:
          type: string
          enum: [bash, zsh, fish, sh]
          description: The preferred shell of the user
        timezone:
          type: string
          description: The timezone of the user
        ssh_public_key:
          type: string
          description: The SSH key for the user
        github_username:
          type: string
          maxLength: 255
          description: The GitHub username of the user
        active:
          type: boolean
          description: Whether the user is active
        roles:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          description: The IDs of the roles assigned to the user.
        groups:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          description: The IDs of the groups assigned to the user.
        max_spaces:
          type: integer
          format: uint32
          description: The maximum number of spaces the user can have, 0 for unlimited.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units the user has.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units the user has.
        max_tunnels:
          type: integer
          format: uint32
          description: The maximum number of tunnels the user can have.
        totp_secret:
          type: string
          description: The TOTP secret for the user.
      required:
        - username
        - password
        - email
        - roles

    error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: The error message.

    UserInfo:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: The ID of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        roles:
          type: array
          items:
            type: string
            format: uuid
          description: The roles of the user
        groups:
          type: array
          items:
            type: string
            format: uuid
          description: The groups of the user
        active:
          type: boolean
          description: Whether the user is active
        current:
          type: boolean
          description: Whether the user is the current user
        last_login_at:
          type: string
          format: date-time
          description: The last login date and time of the user (UTC)
        max_spaces:
          type: integer
          description: The maximum number of spaces the user can have, 0 for unlimited.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units the user has.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units the user has.
        max_tunnels:
          type: integer
          format: uint32
          description: The maximum number of tunnels the user can have.
        number_spaces:
          type: integer
          description: The number of spaces the user has
        number_spaces_deployed:
          type: integer
          description: The number of spaces the user has deployed currently
        number_spaces_deployed_in_location:
          type: integer
          description: The number of spaces the user has deployed currently within the location.
        used_compute_units:
          type: integer
          format: uint32
          description: The number of compute units the user has used.
        used_storage_units:
          type: integer
          format: uint32
          description: The number of storage units the user has used.
        used_tunnels:
          type: integer
          format: uint32
          description: The number of tunnels the user has active.

    UserQuota:
      type: object
      properties:
        max_spaces:
          type: integer
          description: The maximum number of spaces the user can have, 0 for unlimited.
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units the user has.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units the user has.
        max_tunnels:
          type: integer
          format: uint32
          description: The maximum number of tunnels the user can have.
        number_spaces:
          type: integer
          description: The number of spaces the user has.
        number_spaces_deployed:
          type: integer
          description: The number of spaces the user has deployed currently.
        used_compute_units:
          type: integer
          format: uint32
          description: The number of compute units the user has used.
        used_storage_units:
          type: integer
          format: uint32
          description: The number of storage units the user has used.
        used_tunnels:
          type: integer
          format: uint32
          description: The number of tunnels the user has used.

    UserResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: The ID of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        service_password:
          type: string
          example: password
          description: Option service password of the user, if empty a default one will be generated
        roles:
          type: array
          items:
            type: string
            format: uuid
          description: The roles of the user
        groups:
          type: array
          items:
            type: string
            format: uuid
          description: The groups of the user
        active:
          type: boolean
          description: Whether the user is active
        current:
          type: boolean
          description: Whether the user is the current user
        last_login_at:
          type: string
          format: date-time
          description: The last login time of the user
        created_at:
          type: string
          format: date-time
          description: The date and time the user was created
        updated_at:
          type: string
          format: date-time
          description: The date and time the user was last updated
        github_username:
          type: string
          description: The GitHub username of the user
        ssh_public_key:
          type: string
          description: The SSH key for the user
        preferred_shell:
          type: string
          enum: [bash, zsh, fish, sh]
          description: The preferred shell of the user
        timezone:
          type: string
          description: The timezone of the user
        max_spaces:
          type: integer
          description: The maximum number of spaces the user can have, 0 for unlimited
        compute_units:
          type: integer
          format: uint32
          description: The number of compute units the user has.
        storage_units:
          type: integer
          format: uint32
          description: The number of storage units the user has.
        max_tunnels:
          type: integer
          format: uint32
          description: The maximum number of tunnels the user can have.
        totp_secret:
          type: string
          description: The TOTP secret for the user.

    VolumeInfo:
      type: object
      properties:
        volume_id:
          type: string
          format: uuid
          description: The ID of the volume.
        name:
          type: string
          maxLength: 64
          description: The name of the volume.
        active:
          type: boolean
          description: Whether the volume is active.
        location:
          type: string
          maxLength: 64
          description: The location of the volume.
        local_container:
          type: boolean
          description: If the volume is a local container volume, docker or podman.

    VolumeCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 64
        definition:
          type: string
          description: A YAML formatted string describing the volume to be created.
        local_container:
          type: boolean
          description: If the volume is a local container volume, docker or podman.

    VolumeUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 64
        definition:
          type: string
          description: A YAML formatted string describing the volume to be created.

    VolumeDefinition:
      type: object
      properties:
        name:
          type: string
          maxLength: 64
          description: The name of the volume.
        definition:
          type: string
          description: A YAML formatted string describing the volumes to be created
        location:
          type: string
          maxLength: 64
          description: The location of the volume.
        active:
          type: boolean
          description: Whether the volume is active.
        local_container:
          type: boolean
          description: If the volume is a local container volume, docker or podman.

    SpaceTransferRequest:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: The ID of the user to transfer the space to.

  responses:
    bad-request:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    not-found:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    internal-server-error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    locked:
      description: Locked
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    insufficient-storage:
      description: Insufficient Storage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    not-acceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    service-unavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
